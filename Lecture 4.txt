A * variable * is an abstraction of a storage location that holds a value   
  we translate variable into machine concepts 
the * extend * of a variable * instance * is the time interval in which its value can be accessed 

E.g.  
  global variable -> entire execution of the program 
  procedure-local variable -> one execution of procedure 

  fields of abstract/record -> from object creation time to time of last access 

E.g.
  <!-- Scala !-->
  def fact(x: Int): Int = if(x < 2) 1 else x * fact(x-1)

  fact(3) = 3 * fact(2)
          = 3 * 2 * fact(1)
          = 3 * 2 * 1


  we have 3 instances of variable `x` at runtime 


                    _______
               ____|-x = 1-|___                 fact(1)
   ___________|------x = 2-----|____________        fact(2)
  |__________________x = 3__________________|           fact(3)

  The LIFO nature suggests us to use stack 



Implement a stack:
    _______
   /       \
  |  Code   | 
  |   ...   |
  |_________|
  |         |
  |    ^    |
  |    |    |
  |---------|  <- top 
  |  stack  | 
   \_______/

 - designated storage (register) to store address of top of stack (stack pointer) 
 - push a word onto the stack 
  - decrement the stack pointer by 4 
 - pop a record 
  - increment stack pointer by 4 

The convention is to use $30 as the SP, SP is initialized to end of memory 



  |         |
  |    a    | <- SP($30) = 100
  |    b    |              104
  |    c    |              108
  |    *    |               .
  |    *    |               .
  |____*____|               .


